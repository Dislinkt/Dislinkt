version: "3.8"
x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

x-tracing: &jaeger-env
  JAEGER_AGENT_HOST: ${JAEGER_HOST}
  JAEGER_AGENT_PORT: 6831
  JAEGER_SAMPLER_MANAGER_HOST_PORT: ${JAEGER_HOST}:5778
  JAEGER_SAMPLER_TYPE: const
  JAEGER_SAMPLER_PARAM: 1

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}
      USER_DB_NAME: ${USER_DB_NAME}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      #      - JAEGER_SERVICE_NAME=${JAEGER_SERVICE_NAME}
      #      - JAEGER_AGENT_HOST=tracing
      #      - JAEGER_AGENT_PORT=6831
      #      - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
      #      - JAEGER_SAMPLER_TYPE=const
      #      - JAEGER_SAMPLER_PARAM=1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      PATCH_USER_COMMAND_SUBJECT: ${PATCH_USER_COMMAND_SUBJECT}
      PATCH_USER_REPLY_SUBJECT: ${PATCH_USER_REPLY_SUBJECT}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
      EMAIL_SENDER: ${EMAIL_SENDER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
    depends_on:
      - user_db
    #      - tracing
    logging:  *fluent-bit
    networks:
      - network
      - monitoring
    ports:
      - "8081:8000"

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    logging:  *fluent-bit
    environment:
      <<: *jaeger-env
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
      CREATE_JOB_COMMAND_SUBJECT: ${CREATE_JOB_COMMAND_SUBJECT}
      CREATE_JOB_REPLY_SUBJECT: ${CREATE_JOB_REPLY_SUBJECT}
    depends_on:
      - post_db
    networks:
      - network
      - monitoring
    ports:
      - "8082:8000"

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: on-failure
    environment:
      MESSAGE_DB_HOST: ${MESSAGE_DB_HOST}
      MESSAGE_DB_PORT: ${MESSAGE_DB_PORT}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
    depends_on:
      - message_db
    networks:
      - network
      - monitoring

  notification_service:
    image: notification_service
    container_name: notification_service
    build:
      context: .
      dockerfile: ./notification_service/Dockerfile
    restart: on-failure
    environment:
      NOTIFICATION_DB_HOST: ${NOTIFICATION_DB_HOST}
      NOTIFICATION_DB_PORT: ${NOTIFICATION_DB_PORT}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
    depends_on:
      - notification_db
    networks:
      - network
      - monitoring

  event_service:
    image: event_service
    container_name: event_service
    build:
      context: .
      dockerfile: ./event_service/Dockerfile
    restart: on-failure
    environment:
      EVENT_DB_HOST: ${EVENT_DB_HOST}
      EVENT_DB_PORT: ${EVENT_DB_PORT}
      EVENT_SERVICE_PORT: ${EVENT_SERVICE_PORT}
    depends_on:
      - event_db
    networks:
      - network
      - monitoring

  additional_user_service:
    image: additional_user_service
    container_name: additional_user_service
    build:
      context: .
      dockerfile: ./additional_user_service/Dockerfile
    restart: on-failure
    logging:  *fluent-bit
    environment:
      <<: *jaeger-env
      ADDITIONAL_USER_DB_HOST: ${ADDITIONAL_USER_DB_HOST}
      ADDITIONAL_USER_DB_PORT: ${ADDITIONAL_USER_DB_PORT}
      ADDITIONAL_USER_SERVICE_PORT: ${ADDITIONAL_USER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      ADD_EDUCATION_COMMAND_SUBJECT: ${ADD_EDUCATION_COMMAND_SUBJECT}
      ADD_EDUCATION_REPLY_SUBJECT: ${ADD_EDUCATION_REPLY_SUBJECT}
      ADD_SKILL_COMMAND_SUBJECT: ${ADD_SKILL_COMMAND_SUBJECT}
      ADD_SKILL_REPLY_SUBJECT: ${ADD_SKILL_REPLY_SUBJECT}
      DELETE_SKILL_COMMAND_SUBJECT: ${DELETE_SKILL_COMMAND_SUBJECT}
      DELETE_SKILL_REPLY_SUBJECT: ${DELETE_SKILL_REPLY_SUBJECT}
      UPDATE_SKILL_COMMAND_SUBJECT: ${UPDATE_SKILL_COMMAND_SUBJECT}
      UPDATE_SKILL_REPLY_SUBJECT: ${UPDATE_SKILL_REPLY_SUBJECT}
    depends_on:
      - additional_user_db
    networks:
      - network
      - monitoring
    ports:
      - "8083:8000"

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    restart: on-failure
    logging:  *fluent-bit
    environment:
      <<: *jaeger-env
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      CONNECTION_DB_USER: ${CONNECTION_DB_USER}
      CONNECTION_DB_PASS: ${CONNECTION_DB_PASS}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      PATCH_USER_COMMAND_SUBJECT: ${PATCH_USER_COMMAND_SUBJECT}
      PATCH_USER_REPLY_SUBJECT: ${PATCH_USER_REPLY_SUBJECT}
      CREATE_JOB_COMMAND_SUBJECT: ${CREATE_JOB_COMMAND_SUBJECT}
      CREATE_JOB_REPLY_SUBJECT: ${CREATE_JOB_REPLY_SUBJECT}
      ADD_EDUCATION_COMMAND_SUBJECT: ${ADD_EDUCATION_COMMAND_SUBJECT}
      ADD_EDUCATION_REPLY_SUBJECT: ${ADD_EDUCATION_REPLY_SUBJECT}
      ADD_SKILL_COMMAND_SUBJECT: ${ADD_SKILL_COMMAND_SUBJECT}
      ADD_SKILL_REPLY_SUBJECT: ${ADD_SKILL_REPLY_SUBJECT}
      DELETE_SKILL_COMMAND_SUBJECT: ${DELETE_SKILL_COMMAND_SUBJECT}
      DELETE_SKILL_REPLY_SUBJECT: ${DELETE_SKILL_REPLY_SUBJECT}
      UPDATE_SKILL_COMMAND_SUBJECT: ${UPDATE_SKILL_COMMAND_SUBJECT}
      UPDATE_SKILL_REPLY_SUBJECT: ${UPDATE_SKILL_REPLY_SUBJECT}
    depends_on:
      - neo4j
    networks:
      - network
      - monitoring
    ports:
      - "8084:8000"

  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: on-failure
    logging:  *fluent-bit
    environment:
      <<: *jaeger-env
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASS: ${AUTH_DB_PASS}
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
      EMAIL_SENDER: ${EMAIL_SENDER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
    depends_on:
      - auth_db
    networks:
      - network
      - monitoring
    ports:
      - "8085:8000"

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    logging:  *fluent-bit
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      <<: *jaeger-env
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      EVENT_SERVICE_HOST: ${EVENT_SERVICE_HOST}
      EVENT_SERVICE_PORT: ${EVENT_SERVICE_PORT}
      ADDITIONAL_USER_SERVICE_HOST: ${ADDITIONAL_USER_SERVICE_HOST}
      ADDITIONAL_USER_SERVICE_PORT: ${ADDITIONAL_USER_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
    networks:
      - network
      - monitoring
  #      - jaeger-demo
  #    depends_on:
  #      - tracing

  user_db:
    image: postgres
    container_name: user_db
    restart: on-failure
    logging:  *fluent-bit
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    networks:
      - network
      - monitoring

  auth_db:
    image: postgres
    container_name: auth_db
    restart: on-failure
    logging:  *fluent-bit
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
      POSTGRES_DB: ${AUTH_DB_NAME}
    networks:
      - network
      - monitoring

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  message_db:
    image: mongo
    container_name: message_db
    restart: on-failure
    networks:
      - network
      - monitoring

  notification_db:
    image: mongo
    container_name: notification_db
    restart: on-failure
    networks:
      - network
      - monitoring

  event_db:
    image: mongo
    container_name: event_db
    restart: on-failure
    networks:
      - network
      - monitoring

  neo4j:
    image: neo4j:4.3.3-community #4.3.3-community  latest
    container_name: neo4j
    logging:  *fluent-bit
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - network
      - monitoring
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_dbms_memory_pagecache_size: 512M

  additional_user_db:
    image: mongo
    logging:  *fluent-bit
    container_name: additional_user_db
    restart: on-failure
    networks:
      - network
      - monitoring

  #  tracing:
  #    image: jaegertracing/all-in-one
  #    container_name: jaeger
  #    ports:
  #      - "6831:6831/udp"
  #      - "6832:6832/udp"
  #      - "16686:16686"
  #      - "14268:14268"
  #      - "14250:14250"
  #    networks:
  #      - jaeger-demo

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring
    ports:
      - 8222:8222
      - 4222:4222
      - 6222:6222

#  postman:
#    image: postman/newman_ubuntu1404:4.5.5
#    build:
#      context: .
#      dockerfile: initCalls/Dockerfile
#    entrypoint: [ "" ]
#    volumes:
#      - /initCalls:/etc/newman
#    command: >
#      newman run /initCalls/src/INSERT_DATA.postman_collection.json
#      -r cli
#      --delay-request 7000
#      --timeout-request 20000
#    depends_on:
#      - additional_user_service
#      - connection_service
#      - auth_service
#      - post_service
#      - api_gateway
#      - user_service
#    networks:
#      - network

volumes:
  prometheus-data:
  grafana-data:

networks:
  network:
    driver: bridge
  monitoring:
    external: true

#  jaeger-demo:
