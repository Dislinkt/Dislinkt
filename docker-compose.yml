version: "3.8"

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}
      USER_DB_NAME: ${USER_DB_NAME}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
#      - JAEGER_SERVICE_NAME=${JAEGER_SERVICE_NAME}
#      - JAEGER_AGENT_HOST=tracing
#      - JAEGER_AGENT_PORT=6831
#      - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
#      - JAEGER_SAMPLER_TYPE=const
#      - JAEGER_SAMPLER_PARAM=1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    depends_on:
      - user_db
#      - tracing
    networks:
      - network

  additional_user_service:
    image: additional_user_service
    container_name: additional_user_service
    build:
      context: .
      dockerfile: ./additional_user_service/Dockerfile
    restart: on-failure
    environment:
      ADDITIONAL_USER_DB_HOST: ${ADDITIONAL_USER_DB_HOST}
      ADDITIONAL_USER_DB_PORT: ${ADDITIONAL_USER_DB_PORT}
      ADDITIONAL_USER_SERVICE_PORT: ${ADDITIONAL_USER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    depends_on:
      - additional_user_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      ADDITIONAL_USER_SERVICE_HOST: ${ADDITIONAL_USER_SERVICE_HOST}
      ADDITIONAL_USER_SERVICE_PORT: ${ADDITIONAL_USER_SERVICE_PORT}
    networks:
      - network
#      - jaeger-demo
#    depends_on:
#      - tracing

  user_db:
    image: postgres
    container_name: user_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    networks:
      - network

  additional_user_db:
    image: mongo
    container_name: additional_user_db
    restart: on-failure
    networks:
      - network
#  tracing:
#    image: jaegertracing/all-in-one
#    container_name: jaeger
#    ports:
#      - "6831:6831/udp"
#      - "6832:6832/udp"
#      - "16686:16686"
#      - "14268:14268"
#      - "14250:14250"
#    networks:
#      - jaeger-demo

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network
    ports:
      - 8222:8222
      - 4222:4222
      - 6222:6222

networks:
  network:
    driver: bridge
#  jaeger-demo: