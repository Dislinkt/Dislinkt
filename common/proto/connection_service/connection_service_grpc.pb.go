// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: connection_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	CreateConnection(ctx context.Context, in *NewConnectionRequest, opts ...grpc.CallOption) (*NewConnectionResponse, error)
	AcceptConnection(ctx context.Context, in *AcceptConnectionMessage, opts ...grpc.CallOption) (*NewConnectionResponse, error)
	GetAllConnectionForUser(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllConnectionRequestsForUser(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockedUserStatus, error)
	UnblockConnection(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockedUserStatus, error)
	GetAllBlockedForCurrentUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllUserBlockingCurrentUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	RecommendUsersByConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	InsertField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Response, error)
	InsertSkill(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*Response, error)
	InsertJobOffer(ctx context.Context, in *JobOffer, opts ...grpc.CallOption) (*Response, error)
	InsertSkillToUser(ctx context.Context, in *UserInfoItem, opts ...grpc.CallOption) (*Response, error)
	InsertFieldToUser(ctx context.Context, in *UserInfoItem, opts ...grpc.CallOption) (*Response, error)
	RecommendJobBySkill(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*JobOffers, error)
	RecommendJobByField(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*JobOffers, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateConnection(ctx context.Context, in *NewConnectionRequest, opts ...grpc.CallOption) (*NewConnectionResponse, error) {
	out := new(NewConnectionResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) AcceptConnection(ctx context.Context, in *AcceptConnectionMessage, opts ...grpc.CallOption) (*NewConnectionResponse, error) {
	out := new(NewConnectionResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/AcceptConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetAllConnectionForUser(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/GetAllConnectionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetAllConnectionRequestsForUser(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/GetAllConnectionRequestsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockedUserStatus, error) {
	out := new(BlockedUserStatus)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UnblockConnection(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockedUserStatus, error) {
	out := new(BlockedUserStatus)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/UnblockConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetAllBlockedForCurrentUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/GetAllBlockedForCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetAllUserBlockingCurrentUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/GetAllUserBlockingCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) RecommendUsersByConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/RecommendUsersByConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) InsertField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/InsertField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) InsertSkill(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/InsertSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) InsertJobOffer(ctx context.Context, in *JobOffer, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/InsertJobOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) InsertSkillToUser(ctx context.Context, in *UserInfoItem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/InsertSkillToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) InsertFieldToUser(ctx context.Context, in *UserInfoItem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/InsertFieldToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) RecommendJobBySkill(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*JobOffers, error) {
	out := new(JobOffers)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/RecommendJobBySkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) RecommendJobByField(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*JobOffers, error) {
	out := new(JobOffers)
	err := c.cc.Invoke(ctx, "/connection_service_proto.ConnectionService/RecommendJobByField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility
type ConnectionServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	CreateConnection(context.Context, *NewConnectionRequest) (*NewConnectionResponse, error)
	AcceptConnection(context.Context, *AcceptConnectionMessage) (*NewConnectionResponse, error)
	GetAllConnectionForUser(context.Context, *GetConnectionRequest) (*GetAllResponse, error)
	GetAllConnectionRequestsForUser(context.Context, *GetConnectionRequest) (*GetAllResponse, error)
	BlockUser(context.Context, *BlockUserRequest) (*BlockedUserStatus, error)
	UnblockConnection(context.Context, *BlockUserRequest) (*BlockedUserStatus, error)
	GetAllBlockedForCurrentUser(context.Context, *BlockUserRequest) (*GetAllResponse, error)
	GetAllUserBlockingCurrentUser(context.Context, *BlockUserRequest) (*GetAllResponse, error)
	RecommendUsersByConnection(context.Context, *GetConnectionRequest) (*GetAllResponse, error)
	InsertField(context.Context, *Field) (*Response, error)
	InsertSkill(context.Context, *BlockUserRequest) (*Response, error)
	InsertJobOffer(context.Context, *JobOffer) (*Response, error)
	InsertSkillToUser(context.Context, *UserInfoItem) (*Response, error)
	InsertFieldToUser(context.Context, *UserInfoItem) (*Response, error)
	RecommendJobBySkill(context.Context, *GetConnectionRequest) (*JobOffers, error)
	RecommendJobByField(context.Context, *GetConnectionRequest) (*JobOffers, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (UnimplementedConnectionServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConnectionServiceServer) CreateConnection(context.Context, *NewConnectionRequest) (*NewConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedConnectionServiceServer) AcceptConnection(context.Context, *AcceptConnectionMessage) (*NewConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptConnection not implemented")
}
func (UnimplementedConnectionServiceServer) GetAllConnectionForUser(context.Context, *GetConnectionRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnectionForUser not implemented")
}
func (UnimplementedConnectionServiceServer) GetAllConnectionRequestsForUser(context.Context, *GetConnectionRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnectionRequestsForUser not implemented")
}
func (UnimplementedConnectionServiceServer) BlockUser(context.Context, *BlockUserRequest) (*BlockedUserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedConnectionServiceServer) UnblockConnection(context.Context, *BlockUserRequest) (*BlockedUserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockConnection not implemented")
}
func (UnimplementedConnectionServiceServer) GetAllBlockedForCurrentUser(context.Context, *BlockUserRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlockedForCurrentUser not implemented")
}
func (UnimplementedConnectionServiceServer) GetAllUserBlockingCurrentUser(context.Context, *BlockUserRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserBlockingCurrentUser not implemented")
}
func (UnimplementedConnectionServiceServer) RecommendUsersByConnection(context.Context, *GetConnectionRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendUsersByConnection not implemented")
}
func (UnimplementedConnectionServiceServer) InsertField(context.Context, *Field) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertField not implemented")
}
func (UnimplementedConnectionServiceServer) InsertSkill(context.Context, *BlockUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSkill not implemented")
}
func (UnimplementedConnectionServiceServer) InsertJobOffer(context.Context, *JobOffer) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertJobOffer not implemented")
}
func (UnimplementedConnectionServiceServer) InsertSkillToUser(context.Context, *UserInfoItem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSkillToUser not implemented")
}
func (UnimplementedConnectionServiceServer) InsertFieldToUser(context.Context, *UserInfoItem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFieldToUser not implemented")
}
func (UnimplementedConnectionServiceServer) RecommendJobBySkill(context.Context, *GetConnectionRequest) (*JobOffers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendJobBySkill not implemented")
}
func (UnimplementedConnectionServiceServer) RecommendJobByField(context.Context, *GetConnectionRequest) (*JobOffers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendJobByField not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateConnection(ctx, req.(*NewConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_AcceptConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptConnectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).AcceptConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/AcceptConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).AcceptConnection(ctx, req.(*AcceptConnectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetAllConnectionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetAllConnectionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/GetAllConnectionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetAllConnectionForUser(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetAllConnectionRequestsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetAllConnectionRequestsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/GetAllConnectionRequestsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetAllConnectionRequestsForUser(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).BlockUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UnblockConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UnblockConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/UnblockConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UnblockConnection(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetAllBlockedForCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetAllBlockedForCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/GetAllBlockedForCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetAllBlockedForCurrentUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetAllUserBlockingCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetAllUserBlockingCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/GetAllUserBlockingCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetAllUserBlockingCurrentUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_RecommendUsersByConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).RecommendUsersByConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/RecommendUsersByConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).RecommendUsersByConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_InsertField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Field)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).InsertField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/InsertField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).InsertField(ctx, req.(*Field))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_InsertSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).InsertSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/InsertSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).InsertSkill(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_InsertJobOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobOffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).InsertJobOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/InsertJobOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).InsertJobOffer(ctx, req.(*JobOffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_InsertSkillToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).InsertSkillToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/InsertSkillToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).InsertSkillToUser(ctx, req.(*UserInfoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_InsertFieldToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).InsertFieldToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/InsertFieldToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).InsertFieldToUser(ctx, req.(*UserInfoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_RecommendJobBySkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).RecommendJobBySkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/RecommendJobBySkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).RecommendJobBySkill(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_RecommendJobByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).RecommendJobByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection_service_proto.ConnectionService/RecommendJobByField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).RecommendJobByField(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connection_service_proto.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ConnectionService_Register_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _ConnectionService_CreateConnection_Handler,
		},
		{
			MethodName: "AcceptConnection",
			Handler:    _ConnectionService_AcceptConnection_Handler,
		},
		{
			MethodName: "GetAllConnectionForUser",
			Handler:    _ConnectionService_GetAllConnectionForUser_Handler,
		},
		{
			MethodName: "GetAllConnectionRequestsForUser",
			Handler:    _ConnectionService_GetAllConnectionRequestsForUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _ConnectionService_BlockUser_Handler,
		},
		{
			MethodName: "UnblockConnection",
			Handler:    _ConnectionService_UnblockConnection_Handler,
		},
		{
			MethodName: "GetAllBlockedForCurrentUser",
			Handler:    _ConnectionService_GetAllBlockedForCurrentUser_Handler,
		},
		{
			MethodName: "GetAllUserBlockingCurrentUser",
			Handler:    _ConnectionService_GetAllUserBlockingCurrentUser_Handler,
		},
		{
			MethodName: "RecommendUsersByConnection",
			Handler:    _ConnectionService_RecommendUsersByConnection_Handler,
		},
		{
			MethodName: "InsertField",
			Handler:    _ConnectionService_InsertField_Handler,
		},
		{
			MethodName: "InsertSkill",
			Handler:    _ConnectionService_InsertSkill_Handler,
		},
		{
			MethodName: "InsertJobOffer",
			Handler:    _ConnectionService_InsertJobOffer_Handler,
		},
		{
			MethodName: "InsertSkillToUser",
			Handler:    _ConnectionService_InsertSkillToUser_Handler,
		},
		{
			MethodName: "InsertFieldToUser",
			Handler:    _ConnectionService_InsertFieldToUser_Handler,
		},
		{
			MethodName: "RecommendJobBySkill",
			Handler:    _ConnectionService_RecommendJobBySkill_Handler,
		},
		{
			MethodName: "RecommendJobByField",
			Handler:    _ConnectionService_RecommendJobByField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connection_service.proto",
}
