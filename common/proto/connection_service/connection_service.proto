syntax = "proto3";

option go_package = "github.com/dislinkt/connection_service/proto";

package connection_service_proto;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";


service ConnectionService{


  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/connection/register"
      body:"user"
    };
  }

  rpc CreateConnection(NewConnectionRequest) returns (NewConnectionResponse) {
    option (google.api.http) = {
      post: "/connection"
      body:"connection"
    };
  }

  rpc AcceptConnection(AcceptConnectionMessage) returns (NewConnectionResponse) {
    option (google.api.http) = {
      put: "/connection/accept"
      body: "acceptConnection"
    };
  }

  rpc GetAllConnectionForUser(GetConnectionRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/connection/user/{uuid}"
      body: ""
    };
  }


  rpc GetAllConnectionRequestsForUser(GetConnectionRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/connection/user/{uuid}/requests"
      body: ""
    };
  }

  rpc BlockUser(BlockUserRequest) returns (BlockedUserStatus) {
    option (google.api.http) = {
      post: "/connection/user/{uuid}/block/{uuid1}"
      body: ""
    };
  }


  rpc UnblockConnection(BlockUserRequest) returns (BlockedUserStatus) {
    option (google.api.http) = {
      post: "/connection/user/{uuid}/unblock/{uuid1}"
      body: ""
    };
  }

  rpc GetAllBlockedForCurrentUser(BlockUserRequest) returns (GetAllResponse){
    option (google.api.http) = {
      get: "/connection/user/block/{uuid}"
      body: ""
    };
  }

  rpc GetAllUserBlockingCurrentUser(BlockUserRequest) returns (GetAllResponse){
    option (google.api.http) = {
      get: "/connection/user/blocked/{uuid}"
      body: ""
    };
  }

  rpc RecommendUsersByConnection(GetConnectionRequest) returns (GetAllResponse){
    option (google.api.http) = {
      get: "/connection/recommend/users/{uuid}"
      body: ""
    };
  }

  rpc InsertField(Field) returns (Response) {
    option (google.api.http) = {
      post: "/connection/field"
      body: "*"
    };
  }

  rpc InsertSkill(Skill) returns (Response) {
    option (google.api.http) = {
      post: "/skill"
      body: "*"
    };
  }

  rpc InsertJobOffer(JobOffer) returns (Response) {
    option (google.api.http) = {
      post: "/connection/jobOffer"
      body: "*"
    };
  }

  rpc InsertSkillToUser(UserInfoItem) returns (Response) {
    option (google.api.http) = {
      post: "/user/{uuid}/skill/{name}"
      body: "*"
    };
  }

  rpc InsertFieldToUser(UserInfoItem) returns (Response) {
    option (google.api.http) = {
      post: "/user/{uuid}/field/{name}"
      body: "*"
    };
  }

  rpc RecommendJobBySkill(GetConnectionRequest) returns (JobOffers) {
    option (google.api.http) = {
      post: "/user/recommend/skill/{uuid}"
      body: ""
    };
  }

  rpc RecommendJobByField(GetConnectionRequest) returns (JobOffers) {
    option (google.api.http) = {
      get: "/user/recommend/field/{uuid}"
      body: ""
    };
  }

  rpc CheckIfUsersConnected(CheckConnection) returns (CheckResult) {
    option (google.api.http) = {
      post: "/user/connection/check"
      body: "*"
    };
  }
}

message JobOffer {
  string Id = 1;
  string Position = 2;
  string Description = 3;
  string Preconditions = 4;
  google.protobuf.Timestamp DatePosted = 5;
  string Duration = 6;
  string Location = 7;
  string Title = 8;
  string Field= 9;
}

message JobOffers {
  repeated JobOffer jobs = 1;
}

message UserInfoItem{
  string uuid = 1;
  string name = 2;
}

message RegisterRequest{
  User user = 1;
}

message Field{
  string name = 1;
}

message Skill{
  string name = 1;
}

message RegisterResponse{
  User user = 1;
  string message =2 ;
}

message Response{
  string name = 1;
}

message  NewConnectionResponse {
    string  BaseUserUUID = 1;
    string  ConnectUserUUID = 2;
    string  ConnectionResponse = 3;
}


message  BlockedUserStatus {
  string  CurrentUserUUID = 1;
  string  BlockedUserUUID = 2;
  string  ConnectionResponse = 3;
}


message GetConnectionRequest{
    string uuid = 1;
}

message BlockUserRequest {
  string uuid = 1;
  string uuid1 = 2;
}

message Connection {
  string  BaseUserUUID = 1;
  string  ConnectUserUUID = 2;
}

message AcceptConnection {
  string  RequestSenderUser = 1;
  string  RequestApprovalUser = 2;
}

message AcceptConnectionMessage {
  AcceptConnection acceptConnection = 1;
}

message  NewConnectionRequest {
  Connection connection = 1;
}

message User {
  string userID = 1;
  string status = 2;
}

message CheckConnection{
 string uuid1 = 1;
 string uuid2 = 2;
}

message GetAllResponse {
  repeated User users = 1;
}

message CheckResult{
  bool isConnected = 1;
}
