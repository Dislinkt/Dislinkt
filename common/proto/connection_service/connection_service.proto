syntax = "proto3";

option go_package = "github.com/dislinkt/connection_service/proto";

package connection_service_proto;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";


service ConnectionService{


  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/connection/register"
      body:"user"
    };
  }

  rpc CreateConnection(NewConnectionRequest) returns (NewConnectionResponse) {
    option (google.api.http) = {
      post: "/connection"
      body:"connection"
    };
  }

  rpc AcceptConnection(AcceptConnectionMessage) returns (NewConnectionResponse) {
    option (google.api.http) = {
      put: "/connection/accept"
      body: "acceptConnection"
    };
  }

  rpc GetAllConnectionForUser(GetConnectionRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/connection/user/{uuid}"
      body: ""
    };
  }


  rpc GetAllConnectionRequestsForUser(GetConnectionRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/connection/user/{uuid}/requests"
      body: ""
    };
  }

  rpc BlockUser(BlockUserRequest) returns (BlockedUserStatus) {
    option (google.api.http) = {
      post: "/connection/user/{uuid}/block/{uuid1}"
      body: ""
    };
  }

  rpc GetAllBlockedForCurrentUser(BlockUserRequest) returns (GetAllResponse){
    option (google.api.http) = {
      get: "/connection/user/block/{uuid}"
      body: ""
    };
  }

  rpc GetAllUserBlockingCurrentUser(BlockUserRequest) returns (GetAllResponse){
    option (google.api.http) = {
      get: "/connection/user/blocked/{uuid}"
      body: ""
    };
  }


}

message RegisterRequest{
  User user = 1;
}

message RegisterResponse{
  User user = 1;
  string message =2 ;
}

message  NewConnectionResponse {
    string  BaseUserUUID = 1;
    string  ConnectUserUUID = 2;
    string  ConnectionResponse = 3;
}


message  BlockedUserStatus {
  string  CurrentUserUUID = 1;
  string  BlockedUserUUID = 2;
  string  ConnectionResponse = 3;
}


message GetConnectionRequest{
    string uuid = 1;
}

message BlockUserRequest {
  string uuid = 1;
  string uuid1 = 2;
}

message Connection {
  string  BaseUserUUID = 1;
  string  ConnectUserUUID = 2;
}

message AcceptConnection {
  string  RequestSenderUser = 1;
  string  RequestApprovalUser = 2;
}

message AcceptConnectionMessage {
  AcceptConnection acceptConnection = 1;
}

message  NewConnectionRequest {
  Connection connection = 1;
}

message User {
  string userID = 1;
  string status = 2;
}

message GetAllResponse {
  repeated User users = 1;
}

