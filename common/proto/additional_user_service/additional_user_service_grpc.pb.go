// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: additional_user_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdditionalUserServiceClient is the client API for AdditionalUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdditionalUserServiceClient interface {
	NewEducation(ctx context.Context, in *NewEducationRequest, opts ...grpc.CallOption) (*EducationResponse, error)
	GetAllEducation(ctx context.Context, in *GetAllEducationRequest, opts ...grpc.CallOption) (*GetAllEducationResponse, error)
}

type additionalUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdditionalUserServiceClient(cc grpc.ClientConnInterface) AdditionalUserServiceClient {
	return &additionalUserServiceClient{cc}
}

func (c *additionalUserServiceClient) NewEducation(ctx context.Context, in *NewEducationRequest, opts ...grpc.CallOption) (*EducationResponse, error) {
	out := new(EducationResponse)
	err := c.cc.Invoke(ctx, "/additional_user_service_proto.AdditionalUserService/NewEducation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *additionalUserServiceClient) GetAllEducation(ctx context.Context, in *GetAllEducationRequest, opts ...grpc.CallOption) (*GetAllEducationResponse, error) {
	out := new(GetAllEducationResponse)
	err := c.cc.Invoke(ctx, "/additional_user_service_proto.AdditionalUserService/GetAllEducation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdditionalUserServiceServer is the server API for AdditionalUserService service.
// All implementations must embed UnimplementedAdditionalUserServiceServer
// for forward compatibility
type AdditionalUserServiceServer interface {
	NewEducation(context.Context, *NewEducationRequest) (*EducationResponse, error)
	GetAllEducation(context.Context, *GetAllEducationRequest) (*GetAllEducationResponse, error)
	mustEmbedUnimplementedAdditionalUserServiceServer()
}

// UnimplementedAdditionalUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdditionalUserServiceServer struct {
}

func (UnimplementedAdditionalUserServiceServer) NewEducation(context.Context, *NewEducationRequest) (*EducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEducation not implemented")
}
func (UnimplementedAdditionalUserServiceServer) GetAllEducation(context.Context, *GetAllEducationRequest) (*GetAllEducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEducation not implemented")
}
func (UnimplementedAdditionalUserServiceServer) mustEmbedUnimplementedAdditionalUserServiceServer() {}

// UnsafeAdditionalUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdditionalUserServiceServer will
// result in compilation errors.
type UnsafeAdditionalUserServiceServer interface {
	mustEmbedUnimplementedAdditionalUserServiceServer()
}

func RegisterAdditionalUserServiceServer(s grpc.ServiceRegistrar, srv AdditionalUserServiceServer) {
	s.RegisterService(&AdditionalUserService_ServiceDesc, srv)
}

func _AdditionalUserService_NewEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEducationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdditionalUserServiceServer).NewEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/additional_user_service_proto.AdditionalUserService/NewEducation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdditionalUserServiceServer).NewEducation(ctx, req.(*NewEducationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdditionalUserService_GetAllEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEducationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdditionalUserServiceServer).GetAllEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/additional_user_service_proto.AdditionalUserService/GetAllEducation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdditionalUserServiceServer).GetAllEducation(ctx, req.(*GetAllEducationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdditionalUserService_ServiceDesc is the grpc.ServiceDesc for AdditionalUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdditionalUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "additional_user_service_proto.AdditionalUserService",
	HandlerType: (*AdditionalUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEducation",
			Handler:    _AdditionalUserService_NewEducation_Handler,
		},
		{
			MethodName: "GetAllEducation",
			Handler:    _AdditionalUserService_GetAllEducation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "additional_user_service.proto",
}
